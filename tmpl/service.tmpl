package service

import (
	"context"
	"ss-server/internal/dto"
	"ss-server/internal/model"
	"ss-server/internal/repository"

	"github.com/google/uuid"
	"github.com/samber/lo"
	"github.com/uptrace/bun"
)
{{$TableNameFirstCaps := pascalCase .TableName}}

type (
	{{$TableNameFirstCaps}}Service struct {
		BunDB *bun.DB
		Repos *repository.Repositories
	}
)

func (service {{$TableNameFirstCaps}}Service) Get(ctx context.Context, id string) (dto.{{$TableNameFirstCaps}}, error) {
	res, err := service.Repos.{{$TableNameFirstCaps}}.GetById(ctx, service.BunDB, id)

	return res.ToDto(), err
}

func (service {{$TableNameFirstCaps}}Service) List(ctx context.Context, filter dto.Filters) (*dto.{{$TableNameFirstCaps}}ListPaginationResponse, string, error) {
	res, count, err := service.Repos.{{$TableNameFirstCaps}}.ListPagination(
		ctx,
		service.BunDB,
		int(filter.Page),
		int(filter.ResultsPerPage),
		filter.SortColumn,
		filter.SortDirection,
		filter.Search,
	)
	if err != nil {
		return nil, "unable to load {{.TableName}} list", err
	}

	pagination := dto.{{$TableNameFirstCaps}}ListPaginationResponse{
		Items: lo.Map(res, func(m model.{{$TableNameFirstCaps}}, index int) dto.{{$TableNameFirstCaps}} { return m.ToDto() }),
		Pagination: dto.PaginationResult{
			Page:           filter.Page,
			ResultsPerPage: filter.ResultsPerPage,
			TotalResults:   count,
		},
	}

	return &pagination, "", nil
}

func (service {{$TableNameFirstCaps}}Service) Create(ctx context.Context, inputDto dto.{{$TableNameFirstCaps}}Request, loggedInUserId string) (*uuid.UUID, error) {
	var newId = uuid.New()

	mdl := &model.{{$TableNameFirstCaps}}{
		Id:          newId.String(),
		{{range .Columns -}}
		{{pascalCase .Name}}:	inputDto.{{pascalCase .Name}},
		{{end -}}
		CreatedById: loggedInUserId,
	}

	err := service.Repos.{{$TableNameFirstCaps}}.Create(ctx, service.BunDB, mdl)
	if err != nil {
		return nil, err
	}

	return &newId, nil
}

func (service {{$TableNameFirstCaps}}Service) Update(ctx context.Context, id string, inputDTO dto.{{$TableNameFirstCaps}}Request, loggedInUserId string) error {

	org := &model.{{$TableNameFirstCaps}}{
		{{range .Columns -}}
		{{pascalCase .Name}}:	inputDTO.{{pascalCase .Name}},
		{{end -}}
	}

	err := service.BunDB.RunInTx(ctx, nil, func(ctx context.Context, tx bun.Tx) error {
		if err := service.Repos.{{$TableNameFirstCaps}}.Update(ctx, service.BunDB, id, org, loggedInUserId); err != nil {
			return err
		}
		return nil
	})

	return err
}

func (service {{$TableNameFirstCaps}}Service) GetHistory(ctx context.Context, id string) (*[]dto.{{$TableNameFirstCaps}}, error) {

	histRows, err := service.Repos.{{$TableNameFirstCaps}}.GetHistory(ctx, service.BunDB, id)
	if err != nil {
		return nil, err
	}

	histRowsDto := lo.Map(histRows, func(m model.{{$TableNameFirstCaps}}History, index int) dto.{{$TableNameFirstCaps}} { return m.ToDto() })
	return &histRowsDto, nil
}

func (service {{$TableNameFirstCaps}}Service) Search(ctx context.Context, searchInput string) ([]dto.{{$TableNameFirstCaps}}Min, error) {

	rows, err := service.Repos.{{$TableNameFirstCaps}}.Search(ctx, service.BunDB, searchInput)
	if err != nil {
		return nil, err
	}

	dtoRows := lo.Map(rows, func(mdl model.{{$TableNameFirstCaps}}, index int) dto.{{$TableNameFirstCaps}}Min {
		return dto.{{$TableNameFirstCaps}}Min{
			Id:   mdl.Id,
			{{range .Columns -}}
			{{if .IncludedInSearchDropDown -}}
			{{pascalCase .Name}}:	mdl.{{pascalCase .Name}},
			{{end -}}
			{{end -}}
		}
	})

	return dtoRows, nil
}
