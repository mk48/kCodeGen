package service

import (
	"fmt"
	"strings"
	"time"

	"github.com/google/uuid"
	"github.com/jmoiron/sqlx"
	"github.com/samber/lo"

	"ss-server/internal/util"
)

{{$TableNamePascalCase := pascalCase .TableName}}

type (
    {{$TableNamePascalCase}}Model struct {
    Count             uint
    Id                string        `json:"id" db:"id"`
    {{range .Columns -}}
    {{createColumnForStruct .}}
    {{end -}}
	CreatedAt         time.Time     `json:"createdAt" db:"created_at"`
	CreatedBy         IdEmailModel  `json:"createdBy" db:"createdBy"`
	UpdatedAt         *time.Time    `json:"updatedAt" db:"updated_at"`
	UpdatedBy         *IdEmailModel `json:"updatedBy" db:"updatedBy"`
    }

	{{$TableNamePascalCase}}CreateRequest struct {
		{{range .Columns -}}
		{{createColumnForStruct .}}
		{{end -}}
	}

	{{$TableNamePascalCase}}ListPaginationResult struct {
		Pagination PaginationResult `json:"pagination"`
		Items      []{{$TableNamePascalCase}}Model    `json:"items"`
	}

    {{$TableNamePascalCase}}Service struct {
		DB *sqlx.DB
	}
)

func (m *{{$TableNamePascalCase}}Model) RemoveNullSub() {
	if m.UpdatedBy.Id == nil {
		m.UpdatedBy = nil
	}

    {{range .Columns -}}
    {{if .RefTable -}}
	if m.{{pascalCase .Name}}.Id == nil {
		m.{{pascalCase .Name}} = nil
	}
    {{end -}}
    {{end -}}
}



func (service {{$TableNamePascalCase}}Service) Get(id string) (*{{$TableNamePascalCase}}Model, error) {

	query := `SELECT
	"p"."id",
    {{range .Columns -}}
    {{if notNull .RefTable -}}
	{{$.AliasTableNameInSelect}}."{{.Name}}",
    {{end -}}
    {{end -}}
	"uCreatedBy"."id" AS "createdBy.id",
	"uCreatedBy"."email" AS "createdBy.email",
	"uUpdatedBy"."id" AS "updatedBy.id",
	"uUpdatedBy"."email" AS "updatedBy.email",
    {{generateSelectForRefColumn .Columns}}

  FROM
  "{{.TableName}}" "{{.AliasTableNameInSelect}}"
  	INNER JOIN "users" "uCreatedBy" ON "uCreatedBy"."id" = {{.AliasTableNameInSelect}}."created_by"
	LEFT JOIN "users" "uUpdatedBy" ON "uUpdatedBy"."id" = {{.AliasTableNameInSelect}}."updated_by"
  {{joinInSelect .}}
	WHERE {{.AliasTableNameInSelect}}.id = $1
	`

	model := {{$TableNamePascalCase}}Model{}
	err := service.DB.Get(&model, query, id)
	if err != nil {
		return nil, err
	}

	model.RemoveNullSub()
	return &model, nil
}


func (service {{$TableNamePascalCase}}Service) List(filter *Filters) (*{{$TableNamePascalCase}}ListPaginationResult, string, error) {

	// select
	query := `
			SELECT COUNT(*) OVER(),
			"p"."id",
			{{range .Columns -}}
			{{if notNull .RefTable -}}
			{{$.AliasTableNameInSelect}}."{{.Name}}",
			{{end -}}
			{{end -}}
			"uCreatedBy"."id" AS "createdBy.id",
			"uCreatedBy"."email" AS "createdBy.email",
			"uUpdatedBy"."id" AS "updatedBy.id",
			"uUpdatedBy"."email" AS "updatedBy.email",
			{{generateSelectForRefColumn .Columns}}
			FROM
			"{{.TableName}}" "{{.AliasTableNameInSelect}}"
			INNER JOIN "users" "uCreatedBy" ON "uCreatedBy"."id" = {{.AliasTableNameInSelect}}."created_by"
			LEFT JOIN "users" "uUpdatedBy" ON "uUpdatedBy"."id" = {{.AliasTableNameInSelect}}."updated_by"
			{{joinInSelect .}}
	`

	// where
	query = query + " WHERE (STRPOS(LOWER({{.AliasTableNameInSelect}}.{{.ListSearchColumn}}), LOWER($1)) > 0 OR $1 = '')"

	// sort
	if filter.Sort != "" {
		var sortDbColumn = fmt.Sprintf("{{.AliasTableNameInSelect}}.%s", filter.SortColumn)
		query = query + " ORDER BY " + sortDbColumn + " " + filter.SortDirection
	}

	// limit
	query = query + fmt.Sprintf(" LIMIT %d OFFSET %d", filter.ResultsPerPage, filter.ResultsPerPage*(filter.Page-1))

	rows := []{{$TableNamePascalCase}}Model{}
	err := service.DB.Select(&rows, query, filter.Search)
	if err != nil {
		return nil, "Error while querying from DB", err
	}

	//----- keep null as null -----
	for _, mdl := range rows {
		mdl.RemoveNullSub()
	}

	//get total rows
	var totalRows = 0
	if len(rows) > 0 {
		totalRows = int(rows[0].Count)
	}

	pagination := &{{$TableNamePascalCase}}ListPaginationResult{
		Items: rows,
		Pagination: PaginationResult{Page: filter.Page,
			ResultsPerPage: filter.ResultsPerPage,
			TotalResults:   totalRows},
	}

	return pagination, "", nil
}


func (service {{$TableNamePascalCase}}Service) Create(person *PersonCreateRequest, loggedInUserId string) (uuid.UUID, error) {
	var newId = uuid.New().String()
	var created = time.Now()
	insertRow := map[string]interface{}{
		"id":         newId,
		"email":      email,
		"created_at": created,
	}
	insertQuery := util.GenerateInsertQuery("users", insertRow)
	if _, err := service.DB.NamedExec(insertQuery, insertRow); err != nil {
		return nil, err
	}

	return newId, nil
}