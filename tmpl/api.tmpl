package main

import (
	"net/http"
	"ss-server/internal/service"

	"github.com/google/uuid"
	"github.com/labstack/echo/v4"
)

{{$TableNamePascalCase := pascalCase .TableName}}

// List{{$TableNamePascalCase}} godoc
// @Security ApiKeyAuth
// @Tags         {{kebabCase .TableName}}
// @Summary      List {{.TableName}}
// @Description  get {{.TableName}} list with pagination
// @Accept       json
// @Produce      json
// @Param        results_per_page   query      int  	true  	"Results/page"
// @Param        page   			query      int  	true  	"current page"
// @Param        sort   			query      string  	false  	"sort column, ex: name:asc"
// @Param        search   			query      string  	false  	"search value"
// @Success      200  {object}  HttpResult{Result=service.{{$TableNamePascalCase}}ListPaginationResult}
// @Router       /api/{{kebabCase .TableName}} [get]
func (app *application) List{{$TableNamePascalCase}}Handler(c echo.Context) error {
	// {{kebabCase .TableName}}?results_per_page=10 & page=1 & sort=name:asc & search=kumaran

	var filters = c.Get("filters").(service.Filters)
	if filters.Page == 0 {
		return c.JSON(http.StatusBadRequest, HttpErrorMessage("Filters not provided"))
	}

	result, errMsg, err := app.service.{{$TableNamePascalCase}}.List(&filters)
	if err != nil {
		return c.JSON(http.StatusInternalServerError, HttpError(err, errMsg))
	}

	return c.JSON(http.StatusOK, HttpData(result))
}


// GetOne{{$TableNamePascalCase}} godoc
// @Security ApiKeyAuth
// @Tags         {{kebabCase .TableName}}
// @Summary      Get one {{.TableName}} details
// @Description  get one {{.TableName}} details with all fields
// @Accept       json
// @Produce      json
// @Param        id   path      string  true  "{{$TableNamePascalCase}} Id"
// @Success      200  {object}  HttpResult{Result=service.{{$TableNamePascalCase}}Model}
// @Router       /api/{{kebabCase .TableName}}/{id} [get]
func (app *application) Get{{$TableNamePascalCase}}Handler(c echo.Context) error {
	id := c.Param("id")
	if _, err := uuid.Parse(id); err != nil {
		return c.JSON(http.StatusBadRequest, HttpError(err, "{{$TableNamePascalCase}} ID is not a valid UUID"))
	}

	res, err := app.service.{{$TableNamePascalCase}}.Get(id)
	if err != nil {
		return c.JSON(http.StatusInternalServerError, HttpError(err, "Unable to get {{$TableNamePascalCase}} details"))
	}

	return c.JSON(http.StatusOK, HttpData(res))
}


// Create{{$TableNamePascalCase}} godoc
// @Security ApiKeyAuth
// @Tags        {{kebabCase .TableName}}
// @Summary     Create {{kebabCase .TableName}}
// @Accept      json
// @Produce     json
// @Param 		request 	body 	service.{{$TableNamePascalCase}}InputDTO true "Create {{$TableNamePascalCase}}"
// @Success     200  {object}  HttpResult
// @Router      /api/{{kebabCase .TableName}} [post]
func (app *application) Create{{$TableNamePascalCase}}Handler(c echo.Context) error {
	// parse input
	var inputDTO service.{{$TableNamePascalCase}}InputDTO
	err := c.Bind(&inputDTO)
	if err != nil {
		return c.JSON(http.StatusBadRequest, HttpError(err, "Unable to parse input values"))
	}
	
	loggedInUser := c.Get("user").(*service.UserModelResponse)
	newId, err := app.service.{{$TableNamePascalCase}}.Create(&inputDTO, loggedInUser.Id)
	if err != nil {
		return c.JSON(http.StatusInternalServerError, HttpError(err, "Error on creating new {{kebabCase .TableName}}"))
	}

	return c.JSON(http.StatusCreated, HttpData(map[string]string{"id": newId.String()}))
}


// Update{{$TableNamePascalCase}} godoc
// @Security ApiKeyAuth
// @Tags        {{kebabCase .TableName}}
// @Summary     Update {{kebabCase .TableName}}
// @Accept      json
// @Produce     json
// @Param       id   		path    string  						true 	"{{$TableNamePascalCase}} Id"
// @Param 		request 	body	service.{{$TableNamePascalCase}}InputDTO 	true 	"Update {{$TableNamePascalCase}}"
// @Router      /api/{{kebabCase .TableName}}/{id} [put]
func (app *application) Update{{$TableNamePascalCase}}Handler(c echo.Context) error {
	id := c.Param("id")
	if _, err := uuid.Parse(id); err != nil {
		return c.JSON(http.StatusBadRequest, HttpError(err, "{{$TableNamePascalCase}} ID is not a valid UUID"))
	}

	// parse input
	var inputDTO service.{{$TableNamePascalCase}}InputDTO
	err := c.Bind(&inputDTO)
	if err != nil {
		return c.JSON(http.StatusBadRequest, HttpError(err, "Unable to parse input values"))
	}

	loggedInUser := c.Get("user").(*service.UserModelResponse)
	if err = app.service.{{$TableNamePascalCase}}.Update(id, &inputDTO, loggedInUser.Id); err != nil {
		return c.JSON(http.StatusInternalServerError, HttpError(err, "Unable to update {{kebabCase .TableName}}"))
	}

	return c.JSON(http.StatusOK, nil)
}


// Get{{$TableNamePascalCase}}History godoc
// @Security ApiKeyAuth
// @Tags         {{kebabCase .TableName}}
// @Summary      Get {{kebabCase .TableName}} history
// @Description  get one {{kebabCase .TableName}}'s update history
// @Accept       json
// @Produce      json
// @Param        id   path      string  true  "{{$TableNamePascalCase}} Id"
// @Success      200  {object}  HttpResult{Result=[]service.{{$TableNamePascalCase}}Model}
// @Router       /api/{{kebabCase .TableName}}/{id}/history [get]
func (app *application) Get{{$TableNamePascalCase}}History(c echo.Context) error {
	id := c.Param("id")
	if _, err := uuid.Parse(id); err != nil {
		return c.JSON(http.StatusBadRequest, HttpError(err, "{{$TableNamePascalCase}} ID is not a valid UUID"))
	}

	res, err := app.service.{{$TableNamePascalCase}}.GetHistory(id)
	if err != nil {
		return c.JSON(http.StatusInternalServerError, HttpError(err, "Unable to get {{kebabCase .TableName}} history details"))
	}

	return c.JSON(http.StatusOK, HttpData(res))
}


// {{$TableNamePascalCase}}Search godoc
// @Security ApiKeyAuth
// @Tags         {{kebabCase .TableName}}
// @Summary      Search {{kebabCase .TableName}}
// @Description  get list of {{kebabCase .TableName}} by searching {{.ListSearchColumn}}, this will return simple details.
// @Description  this API can be used in dropdown combo box
// @Accept       json
// @Produce      json
// @Param        search   query      string  true  " {{kebabCase .TableName}} {{.ListSearchColumn}}(few chars)"
// @Success      200  {object}  HttpResult{Result=[]service.$TableNamePascalCase}}SearchResponseDTO}
// @Router       /api/{{kebabCase .TableName}}/search [get]
func (app *application) Search{{$TableNamePascalCase}}Handler(c echo.Context) error {

	searchInput := c.QueryParam("search")
	if searchInput == "" {
		return c.JSON(http.StatusBadRequest, HttpErrorMessage("search input should not be empty"))
	}

	res, errMsg, err := app.service.{{$TableNamePascalCase}}.Search(searchInput)
	if err != nil {
		return c.JSON(http.StatusInternalServerError, HttpError(err, errMsg))
	}

	return c.JSON(http.StatusOK, HttpData(res))
}
